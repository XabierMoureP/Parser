/* Generated By:JavaCC: Do not edit this line. XML_parser.java */
        import java.io.*;
        import java.util.*;

        public class XML_parser implements XML_parserConstants {

        public static void main(String[] args) throws ParseException,
                                                FileNotFoundException
       {
                if ( args.length < 1 ) {
                System.out.println("Please pass in the filename for a parameter.");
                System.exit(1);
        }

        XML_parser parser = new XML_parser( new FileInputStream(args[0]) );

        parser.Input();
        System.out.println("Parse completed.");
       }

//Gramatica implementada:
//<fichero_xml> ::= <encabezado> <cuerpo>
//<encabezado> ::= <version> <doctype>
//<cuerpo> ::= <inicio_bloque_asignaturas > {<asignatura>} <fin_bloque_asignaturas>
//<asignatura> ::= <inicio_asignatura> <profesor> <bloque_alumnos> <resumen>? <fin_asignatura>
//<profesor> ::= <inicio_profesor> <nombre_profesor> <mail_profesor> <fin_profesor>
//<bloque_alumnos> ::= <inicio_bloque_alumnos> {<alumno>} <fin_bloque_alumnos>
//<alumno> ::= <inicio_alumno> <nombre_alumno> <mail_alumno> <fin_alumno>
//<resumen> ::= <inicio_resumen> <texto_resumen> <fin_resumen>
  static final public void Input() throws ParseException {
    trace_call("Input");
    try {
      encabezado();
      cuerpo();
      jj_consume_token(0);
    } finally {
      trace_return("Input");
    }
  }

  static final public void encabezado() throws ParseException {
    trace_call("encabezado");
    try {
      jj_consume_token(LBLCABECERA);
      jj_consume_token(DOC);
    } finally {
      trace_return("encabezado");
    }
  }

  static final public void cuerpo() throws ParseException {
    trace_call("cuerpo");
    try {
      jj_consume_token(IETQ_ASIGNATURAS);
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IETQ_NUEVA_ASIGNATURA:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        asignatura();
      }
      jj_consume_token(FETQ_ASIGNATURAS);
    } finally {
      trace_return("cuerpo");
    }
  }

  static final public void asignatura() throws ParseException {
    trace_call("asignatura");
    try {
      jj_consume_token(IETQ_NUEVA_ASIGNATURA);
      profesor();
      bloque_alumnos();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IETQ_RESUMEN:
        resumen();
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
      jj_consume_token(FETQ_NUEVA_ASIGNATURA);
    } finally {
      trace_return("asignatura");
    }
  }

  static final public void profesor() throws ParseException {
    trace_call("profesor");
    try {
      jj_consume_token(IETQ_PROFESOR);
      nombre_profesor();
      mail_profesor();
      jj_consume_token(FETQ_PROFESOR);
    } finally {
      trace_return("profesor");
    }
  }

  static final public void nombre_profesor() throws ParseException {
    trace_call("nombre_profesor");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IETQ_NOMBRE:
        jj_consume_token(IETQ_NOMBRE);
        jj_consume_token(CONTENIDO);
        jj_consume_token(FETQ_NOMBRE);
        break;
      case NOMBRE_SINGLE_LINE:
        jj_consume_token(NOMBRE_SINGLE_LINE);
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("nombre_profesor");
    }
  }

  static final public void mail_profesor() throws ParseException {
    trace_call("mail_profesor");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IETQ_MAIL:
        jj_consume_token(IETQ_MAIL);
        jj_consume_token(MAIL_STRUCTURE);
        jj_consume_token(FETQ_MAIL);
        break;
      case MAIL_SINGLE_LINE:
        jj_consume_token(MAIL_SINGLE_LINE);
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("mail_profesor");
    }
  }

  static final public void bloque_alumnos() throws ParseException {
    trace_call("bloque_alumnos");
    try {
      jj_consume_token(IETQ_ALUMNOS);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IETQ_ALUMNO:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_2;
        }
        alumno();
      }
      jj_consume_token(FETQ_ALUMNOS);
    } finally {
      trace_return("bloque_alumnos");
    }
  }

  static final public void alumno() throws ParseException {
    trace_call("alumno");
    try {
      jj_consume_token(IETQ_ALUMNO);
      nombre_alumno();
      mail_alumno();
      jj_consume_token(FETQ_ALUMNO);
    } finally {
      trace_return("alumno");
    }
  }

  static final public void nombre_alumno() throws ParseException {
    trace_call("nombre_alumno");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IETQ_NOMBRE:
        jj_consume_token(IETQ_NOMBRE);
        jj_consume_token(CONTENIDO);
        jj_consume_token(FETQ_NOMBRE);
        break;
      case NOMBRE_SINGLE_LINE:
        jj_consume_token(NOMBRE_SINGLE_LINE);
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("nombre_alumno");
    }
  }

  static final public void mail_alumno() throws ParseException {
    trace_call("mail_alumno");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IETQ_MAIL:
        jj_consume_token(IETQ_MAIL);
        jj_consume_token(MAIL_STRUCTURE);
        jj_consume_token(FETQ_MAIL);
        break;
      case MAIL_SINGLE_LINE:
        jj_consume_token(MAIL_SINGLE_LINE);
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("mail_alumno");
    }
  }

  static final public void resumen() throws ParseException {
    trace_call("resumen");
    try {
      jj_consume_token(IETQ_RESUMEN);
      jj_consume_token(CONTENIDO);
      jj_consume_token(FETQ_RESUMEN);
    } finally {
      trace_return("resumen");
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public XML_parserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[7];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x8000,0x200000,0x80000,0x100000,0x40000,0x80000,0x100000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x4,0x2,0x0,0x4,0x2,};
   }

  /** Constructor with InputStream. */
  public XML_parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public XML_parser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new XML_parserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public XML_parser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new XML_parserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public XML_parser(XML_parserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(XML_parserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[35];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 7; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 35; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static private int trace_indent = 0;
  static private boolean trace_enabled = true;

/** Enable tracing. */
  static final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  static final public void disable_tracing() {
    trace_enabled = false;
  }

  static private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  static private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  static private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  static private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

     }
