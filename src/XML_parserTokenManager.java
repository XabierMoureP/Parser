/* Generated By:JavaCC: Do not edit this line. XML_parserTokenManager.java */
import java.io.*;
import java.util.*;

/** Token Manager. */
public class XML_parserTokenManager implements XML_parserConstants
{
static int commentNesting = 0;


//Codigo necesario para extraer todos los tokens del fichero
public static void main(String args [])
{
    FileInputStream myfile = null;
    XML_lexer lexer=null;
    int option=0;
    try {
      InputStreamReader isr = new InputStreamReader(System.in);
      BufferedReader bf = new BufferedReader(isr);
      System.out.println("Configuracion de codigo fuente a analizar");
      System.out.println("\u005ct[1] Lectura por teclado");
      System.out.println("\u005ct[2] Lectura desde fichero");

      option = Integer.parseInt(bf.readLine());
      if (option == 1)
      {
        System.out.println("Configurada lectura por teclado. Introduce el codigo fuente");
        lexer = new XML_lexer( System.in ) ;
      }
      else if (option == 2)
      {
        System.out.println("Introduce el nombre del fichero fuente");
        myfile = new FileInputStream(bf.readLine());
        lexer = new XML_lexer ( myfile ) ;
      }
    } catch (Exception e1) {
      // TODO Auto-generated catch block
      e1.printStackTrace();
    }

    while (true)
    {
      try
      {
        Token myToken=lexer.getNextToken();
        if (myToken.kind==lexer.EOF)
        {
          System.out.println("Leido final del fichero");
          System.exit(0);
        }
        System.out.println("Leido lexema: " + myToken.image + "\u005ct-->Token:  " + lexer.tokenImage[myToken.kind]);
      } catch (TokenMgrError e) {
        System.out.println(e.getMessage());
        if (option == 1) lexer.ReInit(System.in);
        else if (option==2) lexer.getNextToken();
      }
    }
  }

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x3f7f4008L) != 0L)
            return 123;
         return -1;
      case 1:
         if ((active0 & 0x100000L) != 0L)
            return 163;
         if ((active0 & 0x3f400000L) != 0L)
            return 148;
         if ((active0 & 0x274000L) != 0L)
            return 221;
         if ((active0 & 0x80000L) != 0L)
            return 178;
         if ((active0 & 0x8L) != 0L)
            return 145;
         return -1;
      case 2:
         if ((active0 & 0x3f400000L) != 0L)
            return 149;
         if ((active0 & 0x80000L) != 0L)
            return 177;
         if ((active0 & 0x100000L) != 0L)
            return 162;
         return -1;
      case 3:
         if ((active0 & 0x100000L) != 0L)
            return 161;
         if ((active0 & 0x80000L) != 0L)
            return 176;
         return -1;
      case 4:
         if ((active0 & 0x80000L) != 0L)
            return 175;
         if ((active0 & 0x100000L) != 0L)
            return 160;
         return -1;
      case 5:
         if ((active0 & 0x80000L) != 0L)
            return 174;
         return -1;
      case 6:
         if ((active0 & 0x80000L) != 0L)
            return 173;
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 60:
         return jjMoveStringLiteralDfa1_0(0x3f7f4008L);
      default :
         return jjMoveNfa_0(5, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa2_0(active0, 0x8L);
      case 47:
         return jjMoveStringLiteralDfa2_0(active0, 0x3f400000L);
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x64000L);
      case 77:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000L);
      case 78:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L);
      case 80:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000L);
      case 82:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa3_0(active0, 0x8L);
      case 65:
         return jjMoveStringLiteralDfa3_0(active0, 0x6400000L);
      case 77:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000L);
      case 78:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000L);
      case 80:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000L);
      case 82:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x60000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 45:
         if ((active0 & 0x8L) != 0L)
            return jjStopAtPos(3, 3);
         break;
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000L);
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x104000L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x6000000L);
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x8010000L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x600000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x60000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000L);
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x10400000L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x8060000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x6200000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(5, 20);
         break;
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000L);
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000L);
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x6200000L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x64000L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000L);
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(6, 28);
         break;
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000L);
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x1280000L);
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000L);
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x6400000L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x60000L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000L);
      case 115:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(7, 18);
         else if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(7, 19);
         break;
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000L);
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x28000000L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x6010000L);
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0x1020000L);
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(8, 17);
         else if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(8, 21);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(8, 26);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(8, 27);
         break;
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000000L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000L);
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000L);
      case 115:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000L);
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000L);
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(9, 16);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(9, 25);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(9, 29);
         break;
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0x1004000L);
      case 117:
         return jjMoveStringLiteralDfa10_0(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(10, 24);
         break;
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0x4000L);
      case 114:
         return jjMoveStringLiteralDfa11_0(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
static private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0x400000L);
      case 115:
         return jjMoveStringLiteralDfa12_0(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
static private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0);
      return 12;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(12, 14);
         break;
      case 115:
         return jjMoveStringLiteralDfa13_0(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0);
}
static private int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0);
      return 13;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(13, 22);
         break;
      default :
         break;
   }
   return jjStartNfa_0(12, active0);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 221;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 221:
               case 63:
                  if (curChar == 62 && kind > 15)
                     kind = 15;
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 30)
                        kind = 30;
                     jjCheckNAddStates(0, 7);
                  }
                  else if ((0x100002600L & l) != 0L)
                  {
                     if (kind > 2)
                        kind = 2;
                  }
                  else if (curChar == 34)
                     jjAddStates(8, 12);
                  else if (curChar == 60)
                     jjAddStates(13, 17);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 0;
                  if (curChar == 32)
                  {
                     if (kind > 30)
                        kind = 30;
                     jjCheckNAddStates(18, 22);
                  }
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 62;
                  else if (curChar == 34)
                     jjAddStates(23, 26);
                  break;
               case 149:
                  if (curChar == 62 && kind > 23)
                     kind = 23;
                  break;
               case 123:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 148;
                  else if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 145;
                  else if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 122;
                  break;
               case 178:
                  if (curChar == 62 && kind > 15)
                     kind = 15;
                  break;
               case 163:
                  if (curChar == 62 && kind > 15)
                     kind = 15;
                  break;
               case 0:
                  if (curChar == 47)
                     jjCheckNAddStates(27, 29);
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(27, 29);
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 1)
                     kind = 1;
                  break;
               case 3:
                  if (curChar == 10 && kind > 1)
                     kind = 1;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 6:
                  if ((0x100002600L & l) != 0L && kind > 2)
                     kind = 2;
                  break;
               case 7:
                  if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 8:
                  if (curChar == 34)
                     jjAddStates(30, 32);
                  break;
               case 9:
                  if (curChar == 34 && kind > 8)
                     kind = 8;
                  break;
               case 10:
                  if (curChar == 53)
                     jjCheckNAdd(9);
                  break;
               case 11:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
               case 16:
                  if (curChar == 48)
                     jjCheckNAdd(9);
                  break;
               case 14:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 49)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 17:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if (curChar == 50)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 26:
                  if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 27:
                  if (curChar == 34)
                     jjAddStates(33, 34);
                  break;
               case 28:
                  if (curChar == 34 && kind > 10)
                     kind = 10;
                  break;
               case 29:
                  if (curChar == 56)
                     jjCheckNAdd(28);
                  break;
               case 30:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 34:
                  if (curChar == 49)
                     jjCheckNAdd(28);
                  break;
               case 35:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 36:
                  if (curChar == 57)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 37:
                  if (curChar == 53)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 38:
                  if (curChar == 56)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if (curChar == 56)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 52:
                  if (curChar == 34)
                     jjAddStates(23, 26);
                  break;
               case 56:
                  if (curChar == 34 && kind > 13)
                     kind = 13;
                  break;
               case 60:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 61:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 66:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 68:
                  if (curChar == 60)
                     jjAddStates(13, 17);
                  break;
               case 69:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 70:
                  if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 71:
                  if (curChar == 34)
                     jjAddStates(35, 37);
                  break;
               case 72:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 73:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 74:
                  if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 75:
                  if (curChar == 34)
                     jjAddStates(38, 39);
                  break;
               case 76:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 77:
                  if (curChar == 62 && kind > 7)
                     kind = 7;
                  break;
               case 78:
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 79:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 80:
                  if (curChar == 56)
                     jjCheckNAdd(76);
                  break;
               case 81:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 85:
                  if (curChar == 49)
                     jjCheckNAdd(76);
                  break;
               case 86:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 87:
                  if (curChar == 57)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 88:
                  if (curChar == 53)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 89:
                  if (curChar == 56)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 90:
                  if (curChar == 56)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 91:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 103:
                  if (curChar == 53)
                     jjCheckNAdd(72);
                  break;
               case 104:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 103;
                  break;
               case 105:
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 104;
                  break;
               case 106:
               case 109:
                  if (curChar == 48)
                     jjCheckNAdd(72);
                  break;
               case 107:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 108:
                  if (curChar == 49)
                     jjstateSet[jjnewStateCnt++] = 107;
                  break;
               case 110:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 109;
                  break;
               case 111:
                  if (curChar == 50)
                     jjstateSet[jjnewStateCnt++] = 110;
                  break;
               case 119:
                  if (curChar == 43)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 124:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 125;
                  break;
               case 125:
                  if (curChar == 34)
                     jjAddStates(40, 43);
                  break;
               case 129:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 130;
                  break;
               case 130:
                  if (curChar != 62)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(44, 47);
                  break;
               case 133:
                  if (curChar != 32)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(44, 47);
                  break;
               case 134:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(44, 47);
                  break;
               case 138:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 137;
                  break;
               case 146:
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 145;
                  break;
               case 147:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 148;
                  break;
               case 150:
                  if (curChar == 39)
                     jjCheckNAddStates(48, 50);
                  break;
               case 152:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(48, 50);
                  break;
               case 155:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 156;
                  break;
               case 157:
                  if (curChar == 62 && kind > 33)
                     kind = 33;
                  break;
               case 158:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 157;
                  break;
               case 159:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 158;
                  break;
               case 160:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 150;
                  break;
               case 165:
                  if (curChar == 39)
                     jjCheckNAddStates(51, 55);
                  break;
               case 168:
                  if (curChar == 32)
                     jjCheckNAddStates(51, 55);
                  break;
               case 169:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(51, 55);
                  break;
               case 170:
                  if (curChar == 62 && kind > 34)
                     kind = 34;
                  break;
               case 171:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 170;
                  break;
               case 172:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 171;
                  break;
               case 173:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 165;
                  break;
               case 183:
                  if (curChar != 32)
                     break;
                  if (kind > 30)
                     kind = 30;
                  jjCheckNAddStates(56, 59);
                  break;
               case 184:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 30)
                     kind = 30;
                  jjCheckNAddStates(56, 59);
                  break;
               case 189:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(60, 62);
                  break;
               case 190:
                  if (curChar != 32)
                     break;
                  if (kind > 30)
                     kind = 30;
                  jjCheckNAddStates(18, 22);
                  break;
               case 191:
                  if (curChar != 32)
                     break;
                  if (kind > 31)
                     kind = 31;
                  jjCheckNAdd(191);
                  break;
               case 192:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 30)
                     kind = 30;
                  jjCheckNAddStates(0, 7);
                  break;
               case 193:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  jjCheckNAdd(193);
                  break;
               case 194:
                  if (curChar == 34)
                     jjAddStates(8, 12);
                  break;
               case 195:
                  if (curChar == 34 && kind > 9)
                     kind = 9;
                  break;
               case 196:
                  if (curChar == 53)
                     jjCheckNAdd(195);
                  break;
               case 197:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 196;
                  break;
               case 198:
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 197;
                  break;
               case 199:
               case 202:
                  if (curChar == 48)
                     jjCheckNAdd(195);
                  break;
               case 200:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 199;
                  break;
               case 201:
                  if (curChar == 49)
                     jjstateSet[jjnewStateCnt++] = 200;
                  break;
               case 203:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 202;
                  break;
               case 204:
                  if (curChar == 50)
                     jjstateSet[jjnewStateCnt++] = 203;
                  break;
               case 205:
                  if (curChar == 34 && kind > 11)
                     kind = 11;
                  break;
               case 206:
                  if (curChar == 56)
                     jjCheckNAdd(205);
                  break;
               case 207:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 206;
                  break;
               case 211:
                  if (curChar == 49)
                     jjCheckNAdd(205);
                  break;
               case 212:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 211;
                  break;
               case 213:
                  if (curChar == 57)
                     jjstateSet[jjnewStateCnt++] = 212;
                  break;
               case 214:
                  if (curChar == 53)
                     jjstateSet[jjnewStateCnt++] = 213;
                  break;
               case 215:
                  if (curChar == 56)
                     jjstateSet[jjnewStateCnt++] = 214;
                  break;
               case 216:
                  if (curChar == 56)
                     jjstateSet[jjnewStateCnt++] = 215;
                  break;
               case 217:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 216;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 221:
               case 62:
                  if ((0x7fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(62, 63);
                  break;
               case 5:
                  if ((0x7fffffe00000000L & l) != 0L)
                  {
                     if (kind > 30)
                        kind = 30;
                     jjCheckNAddStates(63, 70);
                  }
                  else if ((0x7fffffeL & l) != 0L)
                  {
                     if (kind > 30)
                        kind = 30;
                     jjCheckNAddStates(71, 75);
                  }
                  else if (curChar == 64)
                     jjCheckNAdd(65);
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 50;
                  else if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 149:
               case 148:
                  if ((0x7fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(148, 149);
                  break;
               case 123:
                  if ((0x7fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(62, 63);
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 178;
                  else if (curChar == 77)
                     jjstateSet[jjnewStateCnt++] = 163;
                  break;
               case 178:
                  if ((0x7fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(62, 63);
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 177;
                  break;
               case 163:
                  if ((0x7fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(62, 63);
                  else if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 162;
                  break;
               case 1:
                  jjAddStates(27, 29);
                  break;
               case 19:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 20:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 31:
                  if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 41:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 42:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 43:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 45:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 46:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 47:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 49:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 51:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 53:
                  if ((0x7fffffeL & l) != 0L)
                     jjCheckNAddStates(23, 26);
                  break;
               case 54:
                  if ((0x7fffffe00000000L & l) != 0L)
                     jjCheckNAddStates(23, 26);
                  break;
               case 55:
                  if (curChar == 95)
                     jjCheckNAddStates(23, 26);
                  break;
               case 57:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 58:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 64:
                  if (curChar == 64)
                     jjCheckNAdd(65);
                  break;
               case 65:
                  if ((0x7fffffe00000000L & l) != 0L)
                     jjCheckNAddTwoStates(65, 66);
                  break;
               case 67:
                  if ((0x7fffffe00000000L & l) == 0L)
                     break;
                  if (kind > 32)
                     kind = 32;
                  jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 82:
                  if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 83:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 84:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 92:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 93:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 94:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 95:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 96:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 97:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 98:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 99:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 98;
                  break;
               case 100:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 99;
                  break;
               case 101:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 102:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 101;
                  break;
               case 112:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 113:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 114:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 113;
                  break;
               case 115:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 116:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 115;
                  break;
               case 117:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 116;
                  break;
               case 118:
                  if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 117;
                  break;
               case 120:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 119;
                  break;
               case 121:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 120;
                  break;
               case 122:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 121;
                  break;
               case 126:
                  if ((0x7fffffeL & l) != 0L)
                     jjCheckNAddStates(40, 43);
                  break;
               case 127:
                  if ((0x7fffffe00000000L & l) != 0L)
                     jjCheckNAddStates(40, 43);
                  break;
               case 128:
                  if (curChar == 95)
                     jjCheckNAddStates(40, 43);
                  break;
               case 131:
                  if ((0x7fffffeL & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(44, 47);
                  break;
               case 132:
                  if ((0x7fffffe00000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(44, 47);
                  break;
               case 135:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 129;
                  break;
               case 136:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 135;
                  break;
               case 137:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 136;
                  break;
               case 139:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 124;
                  break;
               case 140:
                  if (curChar == 80)
                     jjstateSet[jjnewStateCnt++] = 139;
                  break;
               case 141:
                  if (curChar == 89)
                     jjstateSet[jjnewStateCnt++] = 140;
                  break;
               case 142:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 141;
                  break;
               case 143:
                  if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 142;
                  break;
               case 144:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 143;
                  break;
               case 145:
                  if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 144;
                  break;
               case 151:
                  if ((0x7fffffe00000000L & l) != 0L)
                     jjAddStates(48, 50);
                  break;
               case 153:
                  if (curChar == 64)
                     jjCheckNAdd(154);
                  break;
               case 154:
                  if ((0x7fffffe00000000L & l) != 0L)
                     jjCheckNAddTwoStates(154, 155);
                  break;
               case 156:
                  if ((0x7fffffe00000000L & l) != 0L)
                     jjAddStates(76, 77);
                  break;
               case 161:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 160;
                  break;
               case 162:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 161;
                  break;
               case 164:
                  if (curChar == 77)
                     jjstateSet[jjnewStateCnt++] = 163;
                  break;
               case 166:
                  if ((0x7fffffeL & l) != 0L)
                     jjCheckNAddStates(51, 55);
                  break;
               case 167:
                  if ((0x7fffffe00000000L & l) != 0L)
                     jjCheckNAddStates(51, 55);
                  break;
               case 174:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 173;
                  break;
               case 175:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 174;
                  break;
               case 176:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 175;
                  break;
               case 177:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 176;
                  break;
               case 179:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 178;
                  break;
               case 180:
                  if ((0x7fffffeL & l) == 0L)
                     break;
                  if (kind > 30)
                     kind = 30;
                  jjCheckNAddStates(71, 75);
                  break;
               case 181:
                  if ((0x7fffffeL & l) == 0L)
                     break;
                  if (kind > 30)
                     kind = 30;
                  jjCheckNAddStates(56, 59);
                  break;
               case 182:
                  if ((0x7fffffe00000000L & l) == 0L)
                     break;
                  if (kind > 30)
                     kind = 30;
                  jjCheckNAddStates(56, 59);
                  break;
               case 185:
                  if ((0x7fffffeL & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  jjCheckNAdd(185);
                  break;
               case 186:
                  if ((0x7fffffe00000000L & l) == 0L)
                     break;
                  if (kind > 30)
                     kind = 30;
                  jjCheckNAddStates(63, 70);
                  break;
               case 187:
                  if ((0x7fffffe00000000L & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  jjCheckNAdd(187);
                  break;
               case 188:
                  if ((0x7fffffe00000000L & l) != 0L)
                     jjCheckNAddStates(60, 62);
                  break;
               case 208:
                  if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 207;
                  break;
               case 209:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 208;
                  break;
               case 210:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 209;
                  break;
               case 218:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 217;
                  break;
               case 219:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 218;
                  break;
               case 220:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 219;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(27, 29);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 221 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa1_1(0x20L);
      case 60:
         return jjMoveStringLiteralDfa1_1(0x10L);
      default :
         return 1;
   }
}
static private int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa2_1(active0, 0x10L);
      case 45:
         return jjMoveStringLiteralDfa2_1(active0, 0x20L);
      default :
         return 2;
   }
}
static private int jjMoveStringLiteralDfa2_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 2;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 2;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa3_1(active0, 0x10L);
      case 62:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(2, 5);
         break;
      default :
         return 3;
   }
   return 3;
}
static private int jjMoveStringLiteralDfa3_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 3;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 3;
   }
   switch(curChar)
   {
      case 45:
         if ((active0 & 0x10L) != 0L)
            return jjStopAtPos(3, 4);
         break;
      default :
         return 4;
   }
   return 4;
}
static final int[] jjnextStates = {
   181, 182, 183, 184, 193, 188, 189, 64, 198, 201, 204, 210, 220, 123, 146, 147, 
   164, 179, 181, 182, 183, 184, 191, 53, 54, 55, 60, 1, 2, 4, 12, 15, 
   18, 33, 43, 105, 108, 111, 84, 94, 126, 127, 128, 138, 131, 132, 133, 134, 
   151, 152, 153, 166, 167, 168, 169, 172, 181, 182, 183, 184, 188, 189, 64, 181, 
   182, 183, 184, 187, 188, 189, 64, 181, 182, 183, 184, 185, 156, 159, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, "\74\101\163\151\147\156\141\164\165\162\141\163\76", null, 
"\74\120\162\157\146\145\163\157\162\76", "\74\101\154\165\155\156\157\163\76", "\74\101\154\165\155\156\157\76", 
"\74\116\157\155\142\162\145\76", "\74\115\141\151\154\76", "\74\122\145\163\165\155\145\156\76", 
"\74\57\101\163\151\147\156\141\164\165\162\141\163\76", null, "\74\57\120\162\157\146\145\163\157\162\76", 
"\74\57\101\154\165\155\156\157\163\76", "\74\57\101\154\165\155\156\157\76", "\74\57\116\157\155\142\162\145\76", 
"\74\57\115\141\151\154\76", "\74\57\122\145\163\165\155\145\156\76", null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "IN_COMMENT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0x7ffffff81L, 
};
static final long[] jjtoSkip = {
   0x7eL, 
};
static final long[] jjtoSpecial = {
   0x8L, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[221];
static private final int[] jjstateSet = new int[442];
private static final StringBuilder jjimage = new StringBuilder();
private static StringBuilder image = jjimage;
private static int jjimageLen;
private static int lengthOfMatch;
static protected char curChar;
/** Constructor. */
public XML_parserTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public XML_parserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 221; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   if (jjmatchedPos < 0)
   {
      if (image == null)
         curTokenImage = "";
      else
         curTokenImage = image.toString();
      beginLine = endLine = input_stream.getBeginLine();
      beginColumn = endColumn = input_stream.getBeginColumn();
   }
   else
   {
      String im = jjstrLiteralImages[jjmatchedKind];
      curTokenImage = (im == null) ? input_stream.GetImage() : im;
      beginLine = input_stream.getBeginLine();
      beginColumn = input_stream.getBeginColumn();
      endLine = input_stream.getEndLine();
      endColumn = input_stream.getEndColumn();
   }
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   switch(curLexState)
   {
     case 0:
       jjmatchedKind = 30;
       jjmatchedPos = -1;
       curPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       if (jjmatchedPos == 0 && jjmatchedKind > 6)
       {
          jjmatchedKind = 6;
       }
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static int[] jjemptyLineNo = new int[2];
static int[] jjemptyColNo = new int[2];
static boolean[] jjbeenHere = new boolean[2];
static void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 1 :
         break;
      case 2 :
         break;
      case 3 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                 commentNesting++;
         break;
      case 4 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                 commentNesting++;
         break;
      case 5 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
          commentNesting--;
                        if (commentNesting == 0)
                                SwitchTo(DEFAULT);
         break;
      default :
         break;
   }
}
static void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 0 :
         break;
      case 7 :
         break;
      case 8 :
         break;
      case 9 :
         break;
      case 10 :
         break;
      case 11 :
         break;
      case 12 :
         break;
      case 13 :
         break;
      case 14 :
         break;
      case 15 :
         break;
      case 16 :
         break;
      case 17 :
         break;
      case 18 :
         break;
      case 19 :
         break;
      case 20 :
         break;
      case 21 :
         break;
      case 22 :
         break;
      case 23 :
         break;
      case 24 :
         break;
      case 25 :
         break;
      case 26 :
         break;
      case 27 :
         break;
      case 28 :
         break;
      case 29 :
         break;
      case 30 :
         if (jjmatchedPos == -1)
         {
            if (jjbeenHere[0] &&
                jjemptyLineNo[0] == input_stream.getBeginLine() &&
                jjemptyColNo[0] == input_stream.getBeginColumn())
               throw new TokenMgrError(("Error: Bailing out of infinite loop caused by repeated empty string matches at line " + input_stream.getBeginLine() + ", column " + input_stream.getBeginColumn() + "."), TokenMgrError.LOOP_DETECTED);
            jjemptyLineNo[0] = input_stream.getBeginLine();
            jjemptyColNo[0] = input_stream.getBeginColumn();
            jjbeenHere[0] = true;
         }
         break;
      case 31 :
         break;
      case 32 :
         break;
      case 33 :
         break;
      case 34 :
         break;
      default :
         break;
   }
}
static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
